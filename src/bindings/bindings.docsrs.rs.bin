// Stub build
/* automatically generated by rust-bindgen 0.71.1 */

pub const NDILIB_LIBRARY_NAME: &[u8; 27] = b"Processing.NDI.Lib.x64.dll\0";
pub const NDILIB_REDIST_FOLDER: &[u8; 19] = b"NDI_RUNTIME_DIR_V6\0";
pub const NDILIB_REDIST_URL: &[u8; 28] = b"http://ndi.link/NDIRedistV6\0";
pub const NDILIB_CPP_DEFAULT_CONSTRUCTORS: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut ::std::os::raw::c_char;

pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
pub unsafe fn __security_init_cookie() {
    unimplemented!("Stub bindings")
}
pub unsafe fn __security_check_cookie(_StackCookie: usize) {
    unimplemented!("Stub bindings")
}
pub unsafe fn __report_gsfailure(_StackCookie: usize) -> ! {
    unimplemented!("Stub bindings")
}

pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub const INFINITE: u32 = 4294967295;
pub const NDIlib_frame_type_e_NDIlib_frame_type_none: NDIlib_frame_type_e = 0;
pub const NDIlib_frame_type_e_NDIlib_frame_type_video: NDIlib_frame_type_e = 1;
pub const NDIlib_frame_type_e_NDIlib_frame_type_audio: NDIlib_frame_type_e = 2;
pub const NDIlib_frame_type_e_NDIlib_frame_type_metadata: NDIlib_frame_type_e = 3;
pub const NDIlib_frame_type_e_NDIlib_frame_type_error: NDIlib_frame_type_e = 4;
pub const NDIlib_frame_type_e_NDIlib_frame_type_status_change: NDIlib_frame_type_e = 100;
pub const NDIlib_frame_type_e_NDIlib_frame_type_max: NDIlib_frame_type_e = 2147483647;
pub type NDIlib_frame_type_e = ::std::os::raw::c_int;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_UYVY: NDIlib_FourCC_video_type_e =
    1498831189;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_type_UYVY: NDIlib_FourCC_video_type_e =
    1498831189;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_UYVA: NDIlib_FourCC_video_type_e =
    1096178005;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_type_UYVA: NDIlib_FourCC_video_type_e =
    1096178005;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_P216: NDIlib_FourCC_video_type_e =
    909193808;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_type_P216: NDIlib_FourCC_video_type_e =
    909193808;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_PA16: NDIlib_FourCC_video_type_e =
    909197648;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_type_PA16: NDIlib_FourCC_video_type_e =
    909197648;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_YV12: NDIlib_FourCC_video_type_e =
    842094169;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_type_YV12: NDIlib_FourCC_video_type_e =
    842094169;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_I420: NDIlib_FourCC_video_type_e =
    808596553;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_type_I420: NDIlib_FourCC_video_type_e =
    808596553;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_NV12: NDIlib_FourCC_video_type_e =
    842094158;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_type_NV12: NDIlib_FourCC_video_type_e =
    842094158;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_BGRA: NDIlib_FourCC_video_type_e =
    1095911234;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_type_BGRA: NDIlib_FourCC_video_type_e =
    1095911234;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_BGRX: NDIlib_FourCC_video_type_e =
    1481787202;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_type_BGRX: NDIlib_FourCC_video_type_e =
    1481787202;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_RGBA: NDIlib_FourCC_video_type_e =
    1094862674;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_type_RGBA: NDIlib_FourCC_video_type_e =
    1094862674;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_RGBX: NDIlib_FourCC_video_type_e =
    1480738642;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_type_RGBX: NDIlib_FourCC_video_type_e =
    1480738642;
pub const NDIlib_FourCC_video_type_e_NDIlib_FourCC_video_type_max: NDIlib_FourCC_video_type_e =
    2147483647;
pub type NDIlib_FourCC_video_type_e = ::std::os::raw::c_int;
pub use self::NDIlib_FourCC_video_type_e as NDIlib_FourCC_type_e;
pub const NDIlib_FourCC_audio_type_e_NDIlib_FourCC_audio_type_FLTP: NDIlib_FourCC_audio_type_e =
    1884572742;
pub const NDIlib_FourCC_audio_type_e_NDIlib_FourCC_type_FLTP: NDIlib_FourCC_audio_type_e =
    1884572742;
pub const NDIlib_FourCC_audio_type_e_NDIlib_FourCC_audio_type_max: NDIlib_FourCC_audio_type_e =
    2147483647;
pub type NDIlib_FourCC_audio_type_e = ::std::os::raw::c_int;
pub const NDIlib_frame_format_type_e_NDIlib_frame_format_type_progressive:
    NDIlib_frame_format_type_e = 1;
pub const NDIlib_frame_format_type_e_NDIlib_frame_format_type_interleaved:
    NDIlib_frame_format_type_e = 0;
pub const NDIlib_frame_format_type_e_NDIlib_frame_format_type_field_0: NDIlib_frame_format_type_e =
    2;
pub const NDIlib_frame_format_type_e_NDIlib_frame_format_type_field_1: NDIlib_frame_format_type_e =
    3;
pub const NDIlib_frame_format_type_e_NDIlib_frame_format_type_max: NDIlib_frame_format_type_e =
    2147483647;
pub type NDIlib_frame_format_type_e = ::std::os::raw::c_int;
pub const NDIlib_send_timecode_synthesize: i64 = 9223372036854775807;
pub const NDIlib_recv_timestamp_undefined: i64 = 9223372036854775807;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NDIlib_source_t {
    pub p_ndi_name: *const ::std::os::raw::c_char,
    pub __bindgen_anon_1: NDIlib_source_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NDIlib_source_t__bindgen_ty_1 {
    pub p_url_address: *const ::std::os::raw::c_char,
    pub p_ip_address: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_source_t__bindgen_ty_1"]
        [::std::mem::size_of::<NDIlib_source_t__bindgen_ty_1>() - 8usize];
    ["Alignment of NDIlib_source_t__bindgen_ty_1"]
        [::std::mem::align_of::<NDIlib_source_t__bindgen_ty_1>() - 8usize];
    ["Offset of field: NDIlib_source_t__bindgen_ty_1::p_url_address"]
        [::std::mem::offset_of!(NDIlib_source_t__bindgen_ty_1, p_url_address) - 0usize];
    ["Offset of field: NDIlib_source_t__bindgen_ty_1::p_ip_address"]
        [::std::mem::offset_of!(NDIlib_source_t__bindgen_ty_1, p_ip_address) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_source_t"][::std::mem::size_of::<NDIlib_source_t>() - 16usize];
    ["Alignment of NDIlib_source_t"][::std::mem::align_of::<NDIlib_source_t>() - 8usize];
    ["Offset of field: NDIlib_source_t::p_ndi_name"]
        [::std::mem::offset_of!(NDIlib_source_t, p_ndi_name) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NDIlib_video_frame_v2_t {
    pub xres: ::std::os::raw::c_int,
    pub yres: ::std::os::raw::c_int,
    pub FourCC: NDIlib_FourCC_video_type_e,
    pub frame_rate_N: ::std::os::raw::c_int,
    pub frame_rate_D: ::std::os::raw::c_int,
    pub picture_aspect_ratio: f32,
    pub frame_format_type: NDIlib_frame_format_type_e,
    pub timecode: i64,
    pub p_data: *mut u8,
    pub __bindgen_anon_1: NDIlib_video_frame_v2_t__bindgen_ty_1,
    pub p_metadata: *const ::std::os::raw::c_char,
    pub timestamp: i64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NDIlib_video_frame_v2_t__bindgen_ty_1 {
    pub line_stride_in_bytes: ::std::os::raw::c_int,
    pub data_size_in_bytes: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_video_frame_v2_t__bindgen_ty_1"]
        [::std::mem::size_of::<NDIlib_video_frame_v2_t__bindgen_ty_1>() - 4usize];
    ["Alignment of NDIlib_video_frame_v2_t__bindgen_ty_1"]
        [::std::mem::align_of::<NDIlib_video_frame_v2_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: NDIlib_video_frame_v2_t__bindgen_ty_1::line_stride_in_bytes"][::std::mem::offset_of!(
        NDIlib_video_frame_v2_t__bindgen_ty_1,
        line_stride_in_bytes
    ) - 0usize];
    ["Offset of field: NDIlib_video_frame_v2_t__bindgen_ty_1::data_size_in_bytes"][::std::mem::offset_of!(
        NDIlib_video_frame_v2_t__bindgen_ty_1,
        data_size_in_bytes
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_video_frame_v2_t"][::std::mem::size_of::<NDIlib_video_frame_v2_t>() - 72usize];
    ["Alignment of NDIlib_video_frame_v2_t"]
        [::std::mem::align_of::<NDIlib_video_frame_v2_t>() - 8usize];
    ["Offset of field: NDIlib_video_frame_v2_t::xres"]
        [::std::mem::offset_of!(NDIlib_video_frame_v2_t, xres) - 0usize];
    ["Offset of field: NDIlib_video_frame_v2_t::yres"]
        [::std::mem::offset_of!(NDIlib_video_frame_v2_t, yres) - 4usize];
    ["Offset of field: NDIlib_video_frame_v2_t::FourCC"]
        [::std::mem::offset_of!(NDIlib_video_frame_v2_t, FourCC) - 8usize];
    ["Offset of field: NDIlib_video_frame_v2_t::frame_rate_N"]
        [::std::mem::offset_of!(NDIlib_video_frame_v2_t, frame_rate_N) - 12usize];
    ["Offset of field: NDIlib_video_frame_v2_t::frame_rate_D"]
        [::std::mem::offset_of!(NDIlib_video_frame_v2_t, frame_rate_D) - 16usize];
    ["Offset of field: NDIlib_video_frame_v2_t::picture_aspect_ratio"]
        [::std::mem::offset_of!(NDIlib_video_frame_v2_t, picture_aspect_ratio) - 20usize];
    ["Offset of field: NDIlib_video_frame_v2_t::frame_format_type"]
        [::std::mem::offset_of!(NDIlib_video_frame_v2_t, frame_format_type) - 24usize];
    ["Offset of field: NDIlib_video_frame_v2_t::timecode"]
        [::std::mem::offset_of!(NDIlib_video_frame_v2_t, timecode) - 32usize];
    ["Offset of field: NDIlib_video_frame_v2_t::p_data"]
        [::std::mem::offset_of!(NDIlib_video_frame_v2_t, p_data) - 40usize];
    ["Offset of field: NDIlib_video_frame_v2_t::p_metadata"]
        [::std::mem::offset_of!(NDIlib_video_frame_v2_t, p_metadata) - 56usize];
    ["Offset of field: NDIlib_video_frame_v2_t::timestamp"]
        [::std::mem::offset_of!(NDIlib_video_frame_v2_t, timestamp) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_audio_frame_v2_t {
    pub sample_rate: ::std::os::raw::c_int,
    pub no_channels: ::std::os::raw::c_int,
    pub no_samples: ::std::os::raw::c_int,
    pub timecode: i64,
    pub p_data: *mut f32,
    pub channel_stride_in_bytes: ::std::os::raw::c_int,
    pub p_metadata: *const ::std::os::raw::c_char,
    pub timestamp: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_audio_frame_v2_t"][::std::mem::size_of::<NDIlib_audio_frame_v2_t>() - 56usize];
    ["Alignment of NDIlib_audio_frame_v2_t"]
        [::std::mem::align_of::<NDIlib_audio_frame_v2_t>() - 8usize];
    ["Offset of field: NDIlib_audio_frame_v2_t::sample_rate"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v2_t, sample_rate) - 0usize];
    ["Offset of field: NDIlib_audio_frame_v2_t::no_channels"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v2_t, no_channels) - 4usize];
    ["Offset of field: NDIlib_audio_frame_v2_t::no_samples"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v2_t, no_samples) - 8usize];
    ["Offset of field: NDIlib_audio_frame_v2_t::timecode"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v2_t, timecode) - 16usize];
    ["Offset of field: NDIlib_audio_frame_v2_t::p_data"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v2_t, p_data) - 24usize];
    ["Offset of field: NDIlib_audio_frame_v2_t::channel_stride_in_bytes"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v2_t, channel_stride_in_bytes) - 32usize];
    ["Offset of field: NDIlib_audio_frame_v2_t::p_metadata"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v2_t, p_metadata) - 40usize];
    ["Offset of field: NDIlib_audio_frame_v2_t::timestamp"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v2_t, timestamp) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NDIlib_audio_frame_v3_t {
    pub sample_rate: ::std::os::raw::c_int,
    pub no_channels: ::std::os::raw::c_int,
    pub no_samples: ::std::os::raw::c_int,
    pub timecode: i64,
    pub FourCC: NDIlib_FourCC_audio_type_e,
    pub p_data: *mut u8,
    pub __bindgen_anon_1: NDIlib_audio_frame_v3_t__bindgen_ty_1,
    pub p_metadata: *const ::std::os::raw::c_char,
    pub timestamp: i64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union NDIlib_audio_frame_v3_t__bindgen_ty_1 {
    pub channel_stride_in_bytes: ::std::os::raw::c_int,
    pub data_size_in_bytes: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_audio_frame_v3_t__bindgen_ty_1"]
        [::std::mem::size_of::<NDIlib_audio_frame_v3_t__bindgen_ty_1>() - 4usize];
    ["Alignment of NDIlib_audio_frame_v3_t__bindgen_ty_1"]
        [::std::mem::align_of::<NDIlib_audio_frame_v3_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: NDIlib_audio_frame_v3_t__bindgen_ty_1::channel_stride_in_bytes"][::std::mem::offset_of!(
        NDIlib_audio_frame_v3_t__bindgen_ty_1,
        channel_stride_in_bytes
    ) - 0usize];
    ["Offset of field: NDIlib_audio_frame_v3_t__bindgen_ty_1::data_size_in_bytes"][::std::mem::offset_of!(
        NDIlib_audio_frame_v3_t__bindgen_ty_1,
        data_size_in_bytes
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_audio_frame_v3_t"][::std::mem::size_of::<NDIlib_audio_frame_v3_t>() - 64usize];
    ["Alignment of NDIlib_audio_frame_v3_t"]
        [::std::mem::align_of::<NDIlib_audio_frame_v3_t>() - 8usize];
    ["Offset of field: NDIlib_audio_frame_v3_t::sample_rate"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v3_t, sample_rate) - 0usize];
    ["Offset of field: NDIlib_audio_frame_v3_t::no_channels"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v3_t, no_channels) - 4usize];
    ["Offset of field: NDIlib_audio_frame_v3_t::no_samples"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v3_t, no_samples) - 8usize];
    ["Offset of field: NDIlib_audio_frame_v3_t::timecode"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v3_t, timecode) - 16usize];
    ["Offset of field: NDIlib_audio_frame_v3_t::FourCC"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v3_t, FourCC) - 24usize];
    ["Offset of field: NDIlib_audio_frame_v3_t::p_data"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v3_t, p_data) - 32usize];
    ["Offset of field: NDIlib_audio_frame_v3_t::p_metadata"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v3_t, p_metadata) - 48usize];
    ["Offset of field: NDIlib_audio_frame_v3_t::timestamp"]
        [::std::mem::offset_of!(NDIlib_audio_frame_v3_t, timestamp) - 56usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_metadata_frame_t {
    pub length: ::std::os::raw::c_int,
    pub timecode: i64,
    pub p_data: *mut ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_metadata_frame_t"][::std::mem::size_of::<NDIlib_metadata_frame_t>() - 24usize];
    ["Alignment of NDIlib_metadata_frame_t"]
        [::std::mem::align_of::<NDIlib_metadata_frame_t>() - 8usize];
    ["Offset of field: NDIlib_metadata_frame_t::length"]
        [::std::mem::offset_of!(NDIlib_metadata_frame_t, length) - 0usize];
    ["Offset of field: NDIlib_metadata_frame_t::timecode"]
        [::std::mem::offset_of!(NDIlib_metadata_frame_t, timecode) - 8usize];
    ["Offset of field: NDIlib_metadata_frame_t::p_data"]
        [::std::mem::offset_of!(NDIlib_metadata_frame_t, p_data) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_tally_t {
    pub on_program: bool,
    pub on_preview: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_tally_t"][::std::mem::size_of::<NDIlib_tally_t>() - 2usize];
    ["Alignment of NDIlib_tally_t"][::std::mem::align_of::<NDIlib_tally_t>() - 1usize];
    ["Offset of field: NDIlib_tally_t::on_program"]
        [::std::mem::offset_of!(NDIlib_tally_t, on_program) - 0usize];
    ["Offset of field: NDIlib_tally_t::on_preview"]
        [::std::mem::offset_of!(NDIlib_tally_t, on_preview) - 1usize];
};
pub unsafe fn NDIlib_initialize() -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_destroy() {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_version() -> *const ::std::os::raw::c_char {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_is_supported_CPU() -> bool {
    unimplemented!("Stub bindings")
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_find_instance_type {
    _unused: [u8; 0],
}
pub type NDIlib_find_instance_t = *mut NDIlib_find_instance_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_find_create_t {
    pub show_local_sources: bool,
    pub p_groups: *const ::std::os::raw::c_char,
    pub p_extra_ips: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_find_create_t"][::std::mem::size_of::<NDIlib_find_create_t>() - 24usize];
    ["Alignment of NDIlib_find_create_t"][::std::mem::align_of::<NDIlib_find_create_t>() - 8usize];
    ["Offset of field: NDIlib_find_create_t::show_local_sources"]
        [::std::mem::offset_of!(NDIlib_find_create_t, show_local_sources) - 0usize];
    ["Offset of field: NDIlib_find_create_t::p_groups"]
        [::std::mem::offset_of!(NDIlib_find_create_t, p_groups) - 8usize];
    ["Offset of field: NDIlib_find_create_t::p_extra_ips"]
        [::std::mem::offset_of!(NDIlib_find_create_t, p_extra_ips) - 16usize];
};
pub unsafe fn NDIlib_find_create_v2(        p_create_settings: *const NDIlib_find_create_t,    ) -> NDIlib_find_instance_t {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_find_destroy(p_instance: NDIlib_find_instance_t) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_find_get_current_sources(        p_instance: NDIlib_find_instance_t,        p_no_sources: *mut u32,    ) -> *const NDIlib_source_t {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_find_wait_for_sources(        p_instance: NDIlib_find_instance_t,        timeout_in_ms: u32,    ) -> bool {
    unimplemented!("Stub bindings")
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_recv_instance_type {
    _unused: [u8; 0],
}
pub type NDIlib_recv_instance_t = *mut NDIlib_recv_instance_type;
pub const NDIlib_recv_bandwidth_e_NDIlib_recv_bandwidth_metadata_only: NDIlib_recv_bandwidth_e =
    -10;
pub const NDIlib_recv_bandwidth_e_NDIlib_recv_bandwidth_audio_only: NDIlib_recv_bandwidth_e = 10;
pub const NDIlib_recv_bandwidth_e_NDIlib_recv_bandwidth_lowest: NDIlib_recv_bandwidth_e = 0;
pub const NDIlib_recv_bandwidth_e_NDIlib_recv_bandwidth_highest: NDIlib_recv_bandwidth_e = 100;
pub const NDIlib_recv_bandwidth_e_NDIlib_recv_bandwidth_max: NDIlib_recv_bandwidth_e = 2147483647;
pub type NDIlib_recv_bandwidth_e = ::std::os::raw::c_int;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_BGRX_BGRA:
    NDIlib_recv_color_format_e = 0;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_UYVY_BGRA:
    NDIlib_recv_color_format_e = 1;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_RGBX_RGBA:
    NDIlib_recv_color_format_e = 2;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_UYVY_RGBA:
    NDIlib_recv_color_format_e = 3;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_fastest: NDIlib_recv_color_format_e =
    100;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_best: NDIlib_recv_color_format_e =
    101;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_e_BGRX_BGRA:
    NDIlib_recv_color_format_e = 0;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_e_UYVY_BGRA:
    NDIlib_recv_color_format_e = 1;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_e_RGBX_RGBA:
    NDIlib_recv_color_format_e = 2;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_e_UYVY_RGBA:
    NDIlib_recv_color_format_e = 3;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_BGRX_BGRA_flipped:
    NDIlib_recv_color_format_e = 1000;
pub const NDIlib_recv_color_format_e_NDIlib_recv_color_format_max: NDIlib_recv_color_format_e =
    2147483647;
pub type NDIlib_recv_color_format_e = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NDIlib_recv_create_v3_t {
    pub source_to_connect_to: NDIlib_source_t,
    pub color_format: NDIlib_recv_color_format_e,
    pub bandwidth: NDIlib_recv_bandwidth_e,
    pub allow_video_fields: bool,
    pub p_ndi_recv_name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_recv_create_v3_t"][::std::mem::size_of::<NDIlib_recv_create_v3_t>() - 40usize];
    ["Alignment of NDIlib_recv_create_v3_t"]
        [::std::mem::align_of::<NDIlib_recv_create_v3_t>() - 8usize];
    ["Offset of field: NDIlib_recv_create_v3_t::source_to_connect_to"]
        [::std::mem::offset_of!(NDIlib_recv_create_v3_t, source_to_connect_to) - 0usize];
    ["Offset of field: NDIlib_recv_create_v3_t::color_format"]
        [::std::mem::offset_of!(NDIlib_recv_create_v3_t, color_format) - 16usize];
    ["Offset of field: NDIlib_recv_create_v3_t::bandwidth"]
        [::std::mem::offset_of!(NDIlib_recv_create_v3_t, bandwidth) - 20usize];
    ["Offset of field: NDIlib_recv_create_v3_t::allow_video_fields"]
        [::std::mem::offset_of!(NDIlib_recv_create_v3_t, allow_video_fields) - 24usize];
    ["Offset of field: NDIlib_recv_create_v3_t::p_ndi_recv_name"]
        [::std::mem::offset_of!(NDIlib_recv_create_v3_t, p_ndi_recv_name) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_recv_performance_t {
    pub video_frames: i64,
    pub audio_frames: i64,
    pub metadata_frames: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_recv_performance_t"]
        [::std::mem::size_of::<NDIlib_recv_performance_t>() - 24usize];
    ["Alignment of NDIlib_recv_performance_t"]
        [::std::mem::align_of::<NDIlib_recv_performance_t>() - 8usize];
    ["Offset of field: NDIlib_recv_performance_t::video_frames"]
        [::std::mem::offset_of!(NDIlib_recv_performance_t, video_frames) - 0usize];
    ["Offset of field: NDIlib_recv_performance_t::audio_frames"]
        [::std::mem::offset_of!(NDIlib_recv_performance_t, audio_frames) - 8usize];
    ["Offset of field: NDIlib_recv_performance_t::metadata_frames"]
        [::std::mem::offset_of!(NDIlib_recv_performance_t, metadata_frames) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_recv_queue_t {
    pub video_frames: ::std::os::raw::c_int,
    pub audio_frames: ::std::os::raw::c_int,
    pub metadata_frames: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_recv_queue_t"][::std::mem::size_of::<NDIlib_recv_queue_t>() - 12usize];
    ["Alignment of NDIlib_recv_queue_t"][::std::mem::align_of::<NDIlib_recv_queue_t>() - 4usize];
    ["Offset of field: NDIlib_recv_queue_t::video_frames"]
        [::std::mem::offset_of!(NDIlib_recv_queue_t, video_frames) - 0usize];
    ["Offset of field: NDIlib_recv_queue_t::audio_frames"]
        [::std::mem::offset_of!(NDIlib_recv_queue_t, audio_frames) - 4usize];
    ["Offset of field: NDIlib_recv_queue_t::metadata_frames"]
        [::std::mem::offset_of!(NDIlib_recv_queue_t, metadata_frames) - 8usize];
};
pub unsafe fn NDIlib_recv_create_v3(        p_create_settings: *const NDIlib_recv_create_v3_t,    ) -> NDIlib_recv_instance_t {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_destroy(p_instance: NDIlib_recv_instance_t) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_connect(p_instance: NDIlib_recv_instance_t, p_src: *const NDIlib_source_t) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_capture_v2(        p_instance: NDIlib_recv_instance_t,        p_video_data: *mut NDIlib_video_frame_v2_t,        p_audio_data: *mut NDIlib_audio_frame_v2_t,        p_metadata: *mut NDIlib_metadata_frame_t,        timeout_in_ms: u32,    ) -> NDIlib_frame_type_e {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_capture_v3(        p_instance: NDIlib_recv_instance_t,        p_video_data: *mut NDIlib_video_frame_v2_t,        p_audio_data: *mut NDIlib_audio_frame_v3_t,        p_metadata: *mut NDIlib_metadata_frame_t,        timeout_in_ms: u32,    ) -> NDIlib_frame_type_e {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_free_video_v2(        p_instance: NDIlib_recv_instance_t,        p_video_data: *const NDIlib_video_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_free_audio_v2(        p_instance: NDIlib_recv_instance_t,        p_audio_data: *const NDIlib_audio_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_free_audio_v3(        p_instance: NDIlib_recv_instance_t,        p_audio_data: *const NDIlib_audio_frame_v3_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_free_metadata(        p_instance: NDIlib_recv_instance_t,        p_metadata: *const NDIlib_metadata_frame_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_free_string(        p_instance: NDIlib_recv_instance_t,        p_string: *const ::std::os::raw::c_char,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_send_metadata(        p_instance: NDIlib_recv_instance_t,        p_metadata: *const NDIlib_metadata_frame_t,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_set_tally(        p_instance: NDIlib_recv_instance_t,        p_tally: *const NDIlib_tally_t,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_get_performance(        p_instance: NDIlib_recv_instance_t,        p_total: *mut NDIlib_recv_performance_t,        p_dropped: *mut NDIlib_recv_performance_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_get_queue(        p_instance: NDIlib_recv_instance_t,        p_total: *mut NDIlib_recv_queue_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_clear_connection_metadata(p_instance: NDIlib_recv_instance_t) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_add_connection_metadata(        p_instance: NDIlib_recv_instance_t,        p_metadata: *const NDIlib_metadata_frame_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_get_no_connections(        p_instance: NDIlib_recv_instance_t,    ) -> ::std::os::raw::c_int {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_get_web_control(        p_instance: NDIlib_recv_instance_t,    ) -> *const ::std::os::raw::c_char {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_is_supported(p_instance: NDIlib_recv_instance_t) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_recording_is_supported(p_instance: NDIlib_recv_instance_t) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_zoom(p_instance: NDIlib_recv_instance_t, zoom_value: f32) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_zoom_speed(p_instance: NDIlib_recv_instance_t, zoom_speed: f32) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_pan_tilt(        p_instance: NDIlib_recv_instance_t,        pan_value: f32,        tilt_value: f32,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_pan_tilt_speed(        p_instance: NDIlib_recv_instance_t,        pan_speed: f32,        tilt_speed: f32,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_store_preset(        p_instance: NDIlib_recv_instance_t,        preset_no: ::std::os::raw::c_int,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_recall_preset(        p_instance: NDIlib_recv_instance_t,        preset_no: ::std::os::raw::c_int,        speed: f32,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_auto_focus(p_instance: NDIlib_recv_instance_t) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_focus(p_instance: NDIlib_recv_instance_t, focus_value: f32) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_focus_speed(        p_instance: NDIlib_recv_instance_t,        focus_speed: f32,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_white_balance_auto(p_instance: NDIlib_recv_instance_t) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_white_balance_indoor(p_instance: NDIlib_recv_instance_t) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_white_balance_outdoor(p_instance: NDIlib_recv_instance_t) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_white_balance_oneshot(p_instance: NDIlib_recv_instance_t) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_white_balance_manual(        p_instance: NDIlib_recv_instance_t,        red: f32,        blue: f32,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_exposure_auto(p_instance: NDIlib_recv_instance_t) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_exposure_manual(        p_instance: NDIlib_recv_instance_t,        exposure_level: f32,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_ptz_exposure_manual_v2(        p_instance: NDIlib_recv_instance_t,        iris: f32,        gain: f32,        shutter_speed: f32,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_recording_start(        p_instance: NDIlib_recv_instance_t,        p_filename_hint: *const ::std::os::raw::c_char,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_recording_stop(p_instance: NDIlib_recv_instance_t) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_recording_set_audio_level(        p_instance: NDIlib_recv_instance_t,        level_dB: f32,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_recording_is_recording(p_instance: NDIlib_recv_instance_t) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_recording_get_filename(        p_instance: NDIlib_recv_instance_t,    ) -> *const ::std::os::raw::c_char {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_recording_get_error(        p_instance: NDIlib_recv_instance_t,    ) -> *const ::std::os::raw::c_char {
    unimplemented!("Stub bindings")
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_recv_recording_time_t {
    pub no_frames: i64,
    pub start_time: i64,
    pub last_time: i64,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_recv_recording_time_t"]
        [::std::mem::size_of::<NDIlib_recv_recording_time_t>() - 24usize];
    ["Alignment of NDIlib_recv_recording_time_t"]
        [::std::mem::align_of::<NDIlib_recv_recording_time_t>() - 8usize];
    ["Offset of field: NDIlib_recv_recording_time_t::no_frames"]
        [::std::mem::offset_of!(NDIlib_recv_recording_time_t, no_frames) - 0usize];
    ["Offset of field: NDIlib_recv_recording_time_t::start_time"]
        [::std::mem::offset_of!(NDIlib_recv_recording_time_t, start_time) - 8usize];
    ["Offset of field: NDIlib_recv_recording_time_t::last_time"]
        [::std::mem::offset_of!(NDIlib_recv_recording_time_t, last_time) - 16usize];
};
pub unsafe fn NDIlib_recv_recording_get_times(        p_instance: NDIlib_recv_instance_t,        p_times: *mut NDIlib_recv_recording_time_t,    ) -> bool {
    unimplemented!("Stub bindings")
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_send_instance_type {
    _unused: [u8; 0],
}
pub type NDIlib_send_instance_t = *mut NDIlib_send_instance_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_send_create_t {
    pub p_ndi_name: *const ::std::os::raw::c_char,
    pub p_groups: *const ::std::os::raw::c_char,
    pub clock_video: bool,
    pub clock_audio: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_send_create_t"][::std::mem::size_of::<NDIlib_send_create_t>() - 24usize];
    ["Alignment of NDIlib_send_create_t"][::std::mem::align_of::<NDIlib_send_create_t>() - 8usize];
    ["Offset of field: NDIlib_send_create_t::p_ndi_name"]
        [::std::mem::offset_of!(NDIlib_send_create_t, p_ndi_name) - 0usize];
    ["Offset of field: NDIlib_send_create_t::p_groups"]
        [::std::mem::offset_of!(NDIlib_send_create_t, p_groups) - 8usize];
    ["Offset of field: NDIlib_send_create_t::clock_video"]
        [::std::mem::offset_of!(NDIlib_send_create_t, clock_video) - 16usize];
    ["Offset of field: NDIlib_send_create_t::clock_audio"]
        [::std::mem::offset_of!(NDIlib_send_create_t, clock_audio) - 17usize];
};
pub unsafe fn NDIlib_send_create(        p_create_settings: *const NDIlib_send_create_t,    ) -> NDIlib_send_instance_t {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_destroy(p_instance: NDIlib_send_instance_t) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_send_video_v2(        p_instance: NDIlib_send_instance_t,        p_video_data: *const NDIlib_video_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_send_video_async_v2(        p_instance: NDIlib_send_instance_t,        p_video_data: *const NDIlib_video_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_send_audio_v2(        p_instance: NDIlib_send_instance_t,        p_audio_data: *const NDIlib_audio_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_send_audio_v3(        p_instance: NDIlib_send_instance_t,        p_audio_data: *const NDIlib_audio_frame_v3_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_send_metadata(        p_instance: NDIlib_send_instance_t,        p_metadata: *const NDIlib_metadata_frame_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_capture(        p_instance: NDIlib_send_instance_t,        p_metadata: *mut NDIlib_metadata_frame_t,        timeout_in_ms: u32,    ) -> NDIlib_frame_type_e {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_free_metadata(        p_instance: NDIlib_send_instance_t,        p_metadata: *const NDIlib_metadata_frame_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_get_tally(        p_instance: NDIlib_send_instance_t,        p_tally: *mut NDIlib_tally_t,        timeout_in_ms: u32,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_get_no_connections(        p_instance: NDIlib_send_instance_t,        timeout_in_ms: u32,    ) -> ::std::os::raw::c_int {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_clear_connection_metadata(p_instance: NDIlib_send_instance_t) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_add_connection_metadata(        p_instance: NDIlib_send_instance_t,        p_metadata: *const NDIlib_metadata_frame_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_set_failover(        p_instance: NDIlib_send_instance_t,        p_failover_source: *const NDIlib_source_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_get_source_name(        p_instance: NDIlib_send_instance_t,    ) -> *const NDIlib_source_t {
    unimplemented!("Stub bindings")
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_routing_instance_type {
    _unused: [u8; 0],
}
pub type NDIlib_routing_instance_t = *mut NDIlib_routing_instance_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_routing_create_t {
    pub p_ndi_name: *const ::std::os::raw::c_char,
    pub p_groups: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_routing_create_t"][::std::mem::size_of::<NDIlib_routing_create_t>() - 16usize];
    ["Alignment of NDIlib_routing_create_t"]
        [::std::mem::align_of::<NDIlib_routing_create_t>() - 8usize];
    ["Offset of field: NDIlib_routing_create_t::p_ndi_name"]
        [::std::mem::offset_of!(NDIlib_routing_create_t, p_ndi_name) - 0usize];
    ["Offset of field: NDIlib_routing_create_t::p_groups"]
        [::std::mem::offset_of!(NDIlib_routing_create_t, p_groups) - 8usize];
};
pub unsafe fn NDIlib_routing_create(        p_create_settings: *const NDIlib_routing_create_t,    ) -> NDIlib_routing_instance_t {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_routing_destroy(p_instance: NDIlib_routing_instance_t) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_routing_change(        p_instance: NDIlib_routing_instance_t,        p_source: *const NDIlib_source_t,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_routing_clear(p_instance: NDIlib_routing_instance_t) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_routing_get_no_connections(        p_instance: NDIlib_routing_instance_t,        timeout_in_ms: u32,    ) -> ::std::os::raw::c_int {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_routing_get_source_name(        p_instance: NDIlib_routing_instance_t,    ) -> *const NDIlib_source_t {
    unimplemented!("Stub bindings")
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_audio_frame_interleaved_16s_t {
    pub sample_rate: ::std::os::raw::c_int,
    pub no_channels: ::std::os::raw::c_int,
    pub no_samples: ::std::os::raw::c_int,
    pub timecode: i64,
    pub reference_level: ::std::os::raw::c_int,
    pub p_data: *mut i16,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_audio_frame_interleaved_16s_t"]
        [::std::mem::size_of::<NDIlib_audio_frame_interleaved_16s_t>() - 40usize];
    ["Alignment of NDIlib_audio_frame_interleaved_16s_t"]
        [::std::mem::align_of::<NDIlib_audio_frame_interleaved_16s_t>() - 8usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_16s_t::sample_rate"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_16s_t, sample_rate) - 0usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_16s_t::no_channels"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_16s_t, no_channels) - 4usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_16s_t::no_samples"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_16s_t, no_samples) - 8usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_16s_t::timecode"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_16s_t, timecode) - 16usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_16s_t::reference_level"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_16s_t, reference_level) - 24usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_16s_t::p_data"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_16s_t, p_data) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_audio_frame_interleaved_32s_t {
    pub sample_rate: ::std::os::raw::c_int,
    pub no_channels: ::std::os::raw::c_int,
    pub no_samples: ::std::os::raw::c_int,
    pub timecode: i64,
    pub reference_level: ::std::os::raw::c_int,
    pub p_data: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_audio_frame_interleaved_32s_t"]
        [::std::mem::size_of::<NDIlib_audio_frame_interleaved_32s_t>() - 40usize];
    ["Alignment of NDIlib_audio_frame_interleaved_32s_t"]
        [::std::mem::align_of::<NDIlib_audio_frame_interleaved_32s_t>() - 8usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_32s_t::sample_rate"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_32s_t, sample_rate) - 0usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_32s_t::no_channels"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_32s_t, no_channels) - 4usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_32s_t::no_samples"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_32s_t, no_samples) - 8usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_32s_t::timecode"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_32s_t, timecode) - 16usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_32s_t::reference_level"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_32s_t, reference_level) - 24usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_32s_t::p_data"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_32s_t, p_data) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_audio_frame_interleaved_32f_t {
    pub sample_rate: ::std::os::raw::c_int,
    pub no_channels: ::std::os::raw::c_int,
    pub no_samples: ::std::os::raw::c_int,
    pub timecode: i64,
    pub p_data: *mut f32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_audio_frame_interleaved_32f_t"]
        [::std::mem::size_of::<NDIlib_audio_frame_interleaved_32f_t>() - 32usize];
    ["Alignment of NDIlib_audio_frame_interleaved_32f_t"]
        [::std::mem::align_of::<NDIlib_audio_frame_interleaved_32f_t>() - 8usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_32f_t::sample_rate"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_32f_t, sample_rate) - 0usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_32f_t::no_channels"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_32f_t, no_channels) - 4usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_32f_t::no_samples"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_32f_t, no_samples) - 8usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_32f_t::timecode"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_32f_t, timecode) - 16usize];
    ["Offset of field: NDIlib_audio_frame_interleaved_32f_t::p_data"]
        [::std::mem::offset_of!(NDIlib_audio_frame_interleaved_32f_t, p_data) - 24usize];
};
pub unsafe fn NDIlib_util_send_send_audio_interleaved_16s(        p_instance: NDIlib_send_instance_t,        p_audio_data: *const NDIlib_audio_frame_interleaved_16s_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_send_send_audio_interleaved_32s(        p_instance: NDIlib_send_instance_t,        p_audio_data: *const NDIlib_audio_frame_interleaved_32s_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_send_send_audio_interleaved_32f(        p_instance: NDIlib_send_instance_t,        p_audio_data: *const NDIlib_audio_frame_interleaved_32f_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_to_interleaved_16s_v2(        p_src: *const NDIlib_audio_frame_v2_t,        p_dst: *mut NDIlib_audio_frame_interleaved_16s_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_to_interleaved_16s_v3(        p_src: *const NDIlib_audio_frame_v3_t,        p_dst: *mut NDIlib_audio_frame_interleaved_16s_t,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_from_interleaved_16s_v2(        p_src: *const NDIlib_audio_frame_interleaved_16s_t,        p_dst: *mut NDIlib_audio_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_from_interleaved_16s_v3(        p_src: *const NDIlib_audio_frame_interleaved_16s_t,        p_dst: *mut NDIlib_audio_frame_v3_t,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_to_interleaved_32s_v2(        p_src: *const NDIlib_audio_frame_v2_t,        p_dst: *mut NDIlib_audio_frame_interleaved_32s_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_to_interleaved_32s_v3(        p_src: *const NDIlib_audio_frame_v3_t,        p_dst: *mut NDIlib_audio_frame_interleaved_32s_t,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_from_interleaved_32s_v2(        p_src: *const NDIlib_audio_frame_interleaved_32s_t,        p_dst: *mut NDIlib_audio_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_from_interleaved_32s_v3(        p_src: *const NDIlib_audio_frame_interleaved_32s_t,        p_dst: *mut NDIlib_audio_frame_v3_t,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_to_interleaved_32f_v2(        p_src: *const NDIlib_audio_frame_v2_t,        p_dst: *mut NDIlib_audio_frame_interleaved_32f_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_to_interleaved_32f_v3(        p_src: *const NDIlib_audio_frame_v3_t,        p_dst: *mut NDIlib_audio_frame_interleaved_32f_t,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_from_interleaved_32f_v2(        p_src: *const NDIlib_audio_frame_interleaved_32f_t,        p_dst: *mut NDIlib_audio_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_from_interleaved_32f_v3(        p_src: *const NDIlib_audio_frame_interleaved_32f_t,        p_dst: *mut NDIlib_audio_frame_v3_t,    ) -> bool {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_V210_to_P216(        p_src_v210: *const NDIlib_video_frame_v2_t,        p_dst_p216: *mut NDIlib_video_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_P216_to_V210(        p_src_p216: *const NDIlib_video_frame_v2_t,        p_dst_v210: *mut NDIlib_video_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_video_frame_t {
    pub xres: ::std::os::raw::c_int,
    pub yres: ::std::os::raw::c_int,
    pub FourCC: NDIlib_FourCC_video_type_e,
    pub frame_rate_N: ::std::os::raw::c_int,
    pub frame_rate_D: ::std::os::raw::c_int,
    pub picture_aspect_ratio: f32,
    pub frame_format_type: NDIlib_frame_format_type_e,
    pub timecode: i64,
    pub p_data: *mut u8,
    pub line_stride_in_bytes: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_video_frame_t"][::std::mem::size_of::<NDIlib_video_frame_t>() - 56usize];
    ["Alignment of NDIlib_video_frame_t"][::std::mem::align_of::<NDIlib_video_frame_t>() - 8usize];
    ["Offset of field: NDIlib_video_frame_t::xres"]
        [::std::mem::offset_of!(NDIlib_video_frame_t, xres) - 0usize];
    ["Offset of field: NDIlib_video_frame_t::yres"]
        [::std::mem::offset_of!(NDIlib_video_frame_t, yres) - 4usize];
    ["Offset of field: NDIlib_video_frame_t::FourCC"]
        [::std::mem::offset_of!(NDIlib_video_frame_t, FourCC) - 8usize];
    ["Offset of field: NDIlib_video_frame_t::frame_rate_N"]
        [::std::mem::offset_of!(NDIlib_video_frame_t, frame_rate_N) - 12usize];
    ["Offset of field: NDIlib_video_frame_t::frame_rate_D"]
        [::std::mem::offset_of!(NDIlib_video_frame_t, frame_rate_D) - 16usize];
    ["Offset of field: NDIlib_video_frame_t::picture_aspect_ratio"]
        [::std::mem::offset_of!(NDIlib_video_frame_t, picture_aspect_ratio) - 20usize];
    ["Offset of field: NDIlib_video_frame_t::frame_format_type"]
        [::std::mem::offset_of!(NDIlib_video_frame_t, frame_format_type) - 24usize];
    ["Offset of field: NDIlib_video_frame_t::timecode"]
        [::std::mem::offset_of!(NDIlib_video_frame_t, timecode) - 32usize];
    ["Offset of field: NDIlib_video_frame_t::p_data"]
        [::std::mem::offset_of!(NDIlib_video_frame_t, p_data) - 40usize];
    ["Offset of field: NDIlib_video_frame_t::line_stride_in_bytes"]
        [::std::mem::offset_of!(NDIlib_video_frame_t, line_stride_in_bytes) - 48usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_audio_frame_t {
    pub sample_rate: ::std::os::raw::c_int,
    pub no_channels: ::std::os::raw::c_int,
    pub no_samples: ::std::os::raw::c_int,
    pub timecode: i64,
    pub p_data: *mut f32,
    pub channel_stride_in_bytes: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_audio_frame_t"][::std::mem::size_of::<NDIlib_audio_frame_t>() - 40usize];
    ["Alignment of NDIlib_audio_frame_t"][::std::mem::align_of::<NDIlib_audio_frame_t>() - 8usize];
    ["Offset of field: NDIlib_audio_frame_t::sample_rate"]
        [::std::mem::offset_of!(NDIlib_audio_frame_t, sample_rate) - 0usize];
    ["Offset of field: NDIlib_audio_frame_t::no_channels"]
        [::std::mem::offset_of!(NDIlib_audio_frame_t, no_channels) - 4usize];
    ["Offset of field: NDIlib_audio_frame_t::no_samples"]
        [::std::mem::offset_of!(NDIlib_audio_frame_t, no_samples) - 8usize];
    ["Offset of field: NDIlib_audio_frame_t::timecode"]
        [::std::mem::offset_of!(NDIlib_audio_frame_t, timecode) - 16usize];
    ["Offset of field: NDIlib_audio_frame_t::p_data"]
        [::std::mem::offset_of!(NDIlib_audio_frame_t, p_data) - 24usize];
    ["Offset of field: NDIlib_audio_frame_t::channel_stride_in_bytes"]
        [::std::mem::offset_of!(NDIlib_audio_frame_t, channel_stride_in_bytes) - 32usize];
};
pub unsafe fn NDIlib_find_create2(        p_create_settings: *const NDIlib_find_create_t,    ) -> NDIlib_find_instance_t {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_find_create(        p_create_settings: *const NDIlib_find_create_t,    ) -> NDIlib_find_instance_t {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_find_get_sources(        p_instance: NDIlib_find_instance_t,        p_no_sources: *mut u32,        timeout_in_ms: u32,    ) -> *const NDIlib_source_t {
    unimplemented!("Stub bindings")
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NDIlib_recv_create_t {
    pub source_to_connect_to: NDIlib_source_t,
    pub color_format: NDIlib_recv_color_format_e,
    pub bandwidth: NDIlib_recv_bandwidth_e,
    pub allow_video_fields: bool,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NDIlib_recv_create_t"][::std::mem::size_of::<NDIlib_recv_create_t>() - 32usize];
    ["Alignment of NDIlib_recv_create_t"][::std::mem::align_of::<NDIlib_recv_create_t>() - 8usize];
    ["Offset of field: NDIlib_recv_create_t::source_to_connect_to"]
        [::std::mem::offset_of!(NDIlib_recv_create_t, source_to_connect_to) - 0usize];
    ["Offset of field: NDIlib_recv_create_t::color_format"]
        [::std::mem::offset_of!(NDIlib_recv_create_t, color_format) - 16usize];
    ["Offset of field: NDIlib_recv_create_t::bandwidth"]
        [::std::mem::offset_of!(NDIlib_recv_create_t, bandwidth) - 20usize];
    ["Offset of field: NDIlib_recv_create_t::allow_video_fields"]
        [::std::mem::offset_of!(NDIlib_recv_create_t, allow_video_fields) - 24usize];
};
pub unsafe fn NDIlib_recv_create_v2(        p_create_settings: *const NDIlib_recv_create_t,    ) -> NDIlib_recv_instance_t {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_create2(        p_create_settings: *const NDIlib_recv_create_t,    ) -> NDIlib_recv_instance_t {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_create(        p_create_settings: *const NDIlib_recv_create_t,    ) -> NDIlib_recv_instance_t {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_capture(        p_instance: NDIlib_recv_instance_t,        p_video_data: *mut NDIlib_video_frame_t,        p_audio_data: *mut NDIlib_audio_frame_t,        p_metadata: *mut NDIlib_metadata_frame_t,        timeout_in_ms: u32,    ) -> NDIlib_frame_type_e {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_free_video(        p_instance: NDIlib_recv_instance_t,        p_video_data: *const NDIlib_video_frame_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_recv_free_audio(        p_instance: NDIlib_recv_instance_t,        p_audio_data: *const NDIlib_audio_frame_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_send_video(        p_instance: NDIlib_send_instance_t,        p_video_data: *const NDIlib_video_frame_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_send_video_async(        p_instance: NDIlib_send_instance_t,        p_video_data: *const NDIlib_video_frame_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_send_send_audio(        p_instance: NDIlib_send_instance_t,        p_audio_data: *const NDIlib_audio_frame_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_to_interleaved_16s(        p_src: *const NDIlib_audio_frame_t,        p_dst: *mut NDIlib_audio_frame_interleaved_16s_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_from_interleaved_16s(        p_src: *const NDIlib_audio_frame_interleaved_16s_t,        p_dst: *mut NDIlib_audio_frame_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_to_interleaved_32f(        p_src: *const NDIlib_audio_frame_t,        p_dst: *mut NDIlib_audio_frame_interleaved_32f_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_util_audio_from_interleaved_32f(        p_src: *const NDIlib_audio_frame_interleaved_32f_t,        p_dst: *mut NDIlib_audio_frame_t,    ) {
    unimplemented!("Stub bindings")
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NDIlib_framesync_instance_type {
    _unused: [u8; 0],
}
pub type NDIlib_framesync_instance_t = *mut NDIlib_framesync_instance_type;
pub unsafe fn NDIlib_framesync_create(        p_receiver: NDIlib_recv_instance_t,    ) -> NDIlib_framesync_instance_t {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_framesync_destroy(p_instance: NDIlib_framesync_instance_t) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_framesync_capture_audio(        p_instance: NDIlib_framesync_instance_t,        p_audio_data: *mut NDIlib_audio_frame_v2_t,        sample_rate: ::std::os::raw::c_int,        no_channels: ::std::os::raw::c_int,        no_samples: ::std::os::raw::c_int,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_framesync_capture_audio_v2(        p_instance: NDIlib_framesync_instance_t,        p_audio_data: *mut NDIlib_audio_frame_v3_t,        sample_rate: ::std::os::raw::c_int,        no_channels: ::std::os::raw::c_int,        no_samples: ::std::os::raw::c_int,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_framesync_free_audio(        p_instance: NDIlib_framesync_instance_t,        p_audio_data: *mut NDIlib_audio_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_framesync_free_audio_v2(        p_instance: NDIlib_framesync_instance_t,        p_audio_data: *mut NDIlib_audio_frame_v3_t,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_framesync_audio_queue_depth(        p_instance: NDIlib_framesync_instance_t,    ) -> ::std::os::raw::c_int {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_framesync_capture_video(        p_instance: NDIlib_framesync_instance_t,        p_video_data: *mut NDIlib_video_frame_v2_t,        field_type: NDIlib_frame_format_type_e,    ) {
    unimplemented!("Stub bindings")
}
pub unsafe fn NDIlib_framesync_free_video(        p_instance: NDIlib_framesync_instance_t,        p_video_data: *mut NDIlib_video_frame_v2_t,    ) {
    unimplemented!("Stub bindings")
}
